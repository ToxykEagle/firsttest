import cmds as mc
import numpy
def getVtxPos( shapeNode ) :

	vtxWorldPosition = []    # will contain positions un space of all object vertex

	vtxIndexList = mc.getAttr( shapeNode+".vrts", multiIndices=True )

	for i in vtxIndexList :
		curPointPosition = cmds.xform( str(shapeNode)+".pnts["+str(i)+"]", query=True, translation=True, worldSpace=True )    # [1.1269192869360154, 4.5408735275268555, 1.3387055339628269]
		vtxWorldPosition.append( curPointPosition )

	return vtxWorldPosition


def setImport():
    setImportPath = r'C:\Users\fduvin\Documents\AARON\ScriptMaya\Models\Mini_shroom_1.fbx'
    cmds.file(setImportPath, i=True, mergeNamespacesOnClash=True, namespace=':');

setImport()


vtxWorldPosition = getVtxPos( u'pCylinder7' )

lenghtVtx = len(vtxWorldPosition)
listObject=[]
for i in range (0, lenghtVtx): #number of vertex
    tirage = numpy.random.rand()
    listObject.append('pSphere '+str(i))
    if tirage <= 0.2 : #probabily of creating a mushroom
        setImport()
        mc.rename (u'pSphere5', listObject[i] )
        mc.move(vtxWorldPosition[i][0],vtxWorldPosition[i][1]+0.15,vtxWorldPosition[i][2],listObject[i],absolute=True)
    if tirage <= 0.02 : #probability of rescaling mushroom
        mc.scale( 2, 2, 2, listObject[i], absolute=True )  #scaling mushroom
    if tirage <= 0.05 && tirage >= 0.02 :
        mc.scale( 3, 3, 3, listObject[i], absolute=True )
    if tirage <= 0.1 && tirage >= 0.05:
        mc.scale( 0.7, 0.7, 0.7, listObject[i], absolute=True )












############################################
mc.move(vtxWorldPosition[223][0]+0.1,vtxWorldPosition[223][1],vtxWorldPosition[223][2],u'pCone1',absolute=True)
vtxConePosition = getVtxPos( u'pCone1' )

#centre object
bbx = cmds.xform(u'pCone1', q=True, bb=True, ws=True) # world space
centerX = (bbx[0] + bbx[3]) / 2.0
centerY = (bbx[1] + bbx[4]) / 2.0
centerZ = (bbx[2] + bbx[5]) / 2.0

pos2 = (vtxConePosition[20][0],vtxConePosition[20][1],vtxConePosition[20][2])
pos1=(centerX,centerY+0.1,centerZ)
pos0 = (vtxWorldPosition[223][0],vtxWorldPosition[223][1],vtxWorldPosition[223][2])


vect1 = (pos0[0]-pos1[0],pos0[1]-pos1[1],pos0[2]-pos1[2])
vect2 = (pos2[0]-pos1[0],pos2[1]-pos1[1],pos2[2]-pos1[2])
#################################################################
